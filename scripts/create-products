#!/usr/bin/env ruby
require_relative '../lib/drn/mentoring'

products = [{ name: "Ongoing Mentoring",
              description: "Mentoring on a monthly basis, " \
                           "up to 2 hours of synchronous time " \
                           "(by video or phone) unlimited asynchronous " \
                           "time (by chat or email).",
              price: { unit_amount: 14990, currency: 'usd', recurring: { interval: 'month' } } },
            { name: "Instant Help",
              description: "Remote programming help when the mentor is " \
                           "available (by video conference) paid out by the " \
                           "minute, first 5 minutes are free.",
              price: { unit_amount: 190, currency: 'usd' } },
            { name: "Instant Conversation",
              description: "Remote programming help when the mentor is " \
                           "available (by video conference) paid out by the " \
                           "hour, first 5 minutes are free.",
              price: { unit_amount: 9990, currency: 'usd' } }]

product_list = Stripe::Product.list
existing = product_list.map(&:name).to_set


products.each do |data|
  product =
    if existing.include?(data[:name])
      product_list.find { |p| p.name == data[:name] }
    else
      print "Creating product #{data[:name]}..."
      Stripe::Product.create(data.except(:price)).tap do
        puts "Done."
      end
    end

  if Stripe::Price.list(product: product.id).empty?
    print "Creating price for #{product.name}..."
    begin
      Stripe::Price.create(data[:price].merge(product: product.id))
    rescue => e
      print "Error: #{e.message}, rolling back..."
      Stripe::Product.delete(product.id)
    end
    puts "Done."
  end
end
